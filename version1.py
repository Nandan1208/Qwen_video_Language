from transformers import Qwen2VLForConditionalGeneration, AutoProcessor
from qwen_vl_utils import process_vision_info
import torch

# Model and processor initialization
model_name = "Qwen/Qwen2-VL-2B-Instruct"

model = Qwen2VLForConditionalGeneration.from_pretrained(
    model_name, torch_dtype=torch.bfloat16, device_map="auto"
)
processor = AutoProcessor.from_pretrained(model_name)


def prepare_messages() -> list:
    """
    Prepare the input messages for the multi-modal model. The messages
    contain both video and text data in a structured format.

    Returns:
        list: A list containing the message dictionary with video path,
              pixel limits, frame rate, and the associated text prompt.
    """
    return [
        {
            "role": "user",
            "content": [
                {
                    "type": "video",
                    "video": "/content/3197622-hd_1920_1080_25fps.mp4",
                    "max_pixels": 360 * 420,
                    "fps": 1.0,
                },
                {"type": "text", "text": "explain this video."},
            ],
        }
    ]


def generate_video_text_response(messages: list) -> list:
    """
    Generate a textual explanation for the input video and text prompt
    using the Qwen2VL multi-modal model.

    Args:
        messages (list): List of input messages including video and text data.

    Returns:
        list: List of decoded output texts generated by the model.
    """
    # Format text input with chat template (without tokenizing)
    text = processor.apply_chat_template(messages, tokenize=False, add_generation_prompt=True)

    # Extract vision inputs (images/videos) from messages
    image_inputs, video_inputs = process_vision_info(messages)

    # Prepare the combined inputs for the model
    inputs = processor(
        text=[text],
        images=image_inputs,
        videos=video_inputs,
        padding=True,
        return_tensors="pt",
    ).to("cuda")

    # Generate token IDs for the output with a max token limit
    generated_ids = model.generate(**inputs, max_new_tokens=512)

    # Trim prompt tokens from generated tokens to keep only new generated part
    generated_ids_trimmed = [
        out_ids[len(in_ids):] for in_ids, out_ids in zip(inputs.input_ids, generated_ids)
    ]

    # Decode generated tokens into readable text
    output_text = processor.batch_decode(
        generated_ids_trimmed, skip_special_tokens=True, clean_up_tokenization_spaces=False
    )
    return output_text


if __name__ == "__main__":
    # Prepare input messages
    messages = prepare_messages()

    # Generate and print the model's response
    response = generate_video_text_response(messages)
    print(response)
